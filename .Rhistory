destination_count=merge(destination_delay_count,destination_non_delay_count,by="DEST" )
# rename columns of delayed and nondelayed fligths
destination_count=rename(destination_count,delay=destdelay, Non_Delayed=destnondelay)
#Calculating Percentages of delayed and ontime flights
destination_count$Delayed <- (destination_count$delay/(destination_count$delay+destination_count$Non_Delayed)) * 100
destination_count$Ontime <- (destination_count$Non_Delayed/(destination_count$delay+destination_count$Non_Delayed)) * 100
destination_count <- destination_count[,-2:-3]
#Calculating Ratios
destination_count$Ratio <- destination_count$Delayed/destination_count$Ontime * 100
destination_count$Ratio <- round(destination_count$Ratio,2)
#Using Melt function to transform the Wide data to Long data format
DF2 <- melt(destination_count, id.var="DEST")
DF2$Ratio <- DF2[9:12,3]
DF2 <- DF2[-9:-12,]
DF2[5:8,4] <- NA
ggplot(DF2, aes(x=DEST,y=value,fill=variable)) + geom_bar(stat="identity") + geom_path(aes(y=Ratio,color="Ratio of Delayed flights against Non Delayed Flights"),group = 1) + geom_text_repel(aes(label=Ratio), size = 3) + ggtitle("Percentage of Flights Delayed by Destination") + labs(x="Destinations",y="Percentage")
origin_delay_count=aggregate(delay_flights$ORIGIN, list(ORIGIN=delay_flights$ORIGIN), length)
x2=arrange(origin_delay_count, desc(x))
x2
#Here are we picking 4 origins randomly for analysis
origin_delay_count=origin_delay_count[(origin_delay_count$ORIGIN == "SNA" | origin_delay_count$ORIGIN == "ORD" | origin_delay_count$ORIGIN == "JFK" | origin_delay_count$ORIGIN == "IAH") ,]
#Finding the num# of Non-Delayed flights to each origin
origin_non_delay_count=aggregate(non_delay_flights$ORIGIN, list(ORIGIN=non_delay_flights$ORIGIN), length)
x2=arrange(origin_non_delay_count, desc(x))
x2
#Here are we picking 4 origins randomly for analysis
origin_non_delay_count=origin_non_delay_count[(origin_non_delay_count$ORIGIN == "SNA" | origin_non_delay_count$ORIGIN == "ORD" | origin_non_delay_count$ORIGIN == "JFK" | origin_non_delay_count$ORIGIN == "IAH") ,]
# rename columns of both data frames approiately origin fight counts for delay and non-delayed
origin_delay_count=rename(origin_delay_count,ORIGINdelay=ORIGINdelay)
origin_non_delay_count=rename(origin_non_delay_count,ORIGINnondelay=x)
#Merging the above 2 data frames into 1, as per the origin
origin_count=merge(origin_delay_count,origin_non_delay_count,by="ORIGIN" )
# rename columns of delayed and nondelayed fligths
origin_count=rename(origin_count,delay=ORIGINdelay, Non_Delayed=ORIGINnondelay)
# rename columns of delayed and nondelayed fligths
origin_count=rename(origin_count,delay=ORIGINdelay, Non_Delayed=ORIGINnondelay)
#Calculating Percentages of delayed and ontime flights
origin_count$Delayed <- (origin_count$delay/(origin_count$delay+origin_count$Non_Delayed)) * 100
origin_count$Ontime <- (origin_count$Non_Delayed/(origin_count$delay+origin_count$Non_Delayed)) * 100
origin_count <- origin_count[,-2:-3]
#Calculating Ratios
origin_count$Ratio <- origin_count$Delayed/origin_count$Ontime * 100
origin_count$Ratio <- round(origin_count$Ratio,2)
#Using Melt function to transform the Wide data to Long data format
DF3 <- melt(origin_count, id.var="ORIGIN")
DF3$Ratio <- DF3[9:12,3]
DF3 <- DF3[-9:-12,]
DF3[5:8,4] <- NA
origin_delay_count=aggregate(delay_flights$ORIGIN, list(ORIGIN=delay_flights$ORIGIN), length)
x2=arrange(origin_delay_count, desc(x))
x2
origin_delay_count=origin_delay_count[(origin_delay_count$ORIGIN == "SNA" | origin_delay_count$ORIGIN == "ORD" | origin_delay_count$ORIGIN == "JFK" | origin_delay_count$ORIGIN == "IAH") ,]
origin_non_delay_count=aggregate(non_delay_flights$ORIGIN, list(ORIGIN=non_delay_flights$ORIGIN), length)
x2=arrange(origin_non_delay_count, desc(x))
x2
origin_non_delay_count=origin_non_delay_count[(origin_non_delay_count$ORIGIN == "SNA" | origin_non_delay_count$ORIGIN == "ORD" | origin_non_delay_count$ORIGIN == "JFK" | origin_non_delay_count$ORIGIN == "IAH") ,]
origin_delay_count=rename(origin_delay_count,ORIGINdelay=ORIGINdelay)
origin_delay_count
origin_delay_count=rename(origin_delay_count,ORIGINdelay=x)
origin_non_delay_count=rename(origin_non_delay_count,ORIGINnondelay=x)
origin_count=merge(origin_delay_count,origin_non_delay_count,by="ORIGIN" )
# rename columns of delayed and nondelayed fligths
origin_count=rename(origin_count,delay=ORIGINdelay, Non_Delayed=ORIGINnondelay)
# rename columns of delayed and nondelayed fligths
origin_count=rename(origin_count,delay=ORIGINdelay, Non_Delayed=ORIGINnondelay)
origin_count=merge(origin_delay_count,origin_non_delay_count,by="ORIGIN" )
origin_count=rename(origin_count,delay=ORIGINdelay, Non_Delayed=ORIGINnondelay)
origin_count$Delayed <- (origin_count$delay/(origin_count$delay+origin_count$Non_Delayed)) * 100
origin_count$Ontime <- (origin_count$Non_Delayed/(origin_count$delay+origin_count$Non_Delayed)) * 100
origin_count <- origin_count[,-2:-3]
origin_count$Ratio <- origin_count$Delayed/origin_count$Ontime * 100
origin_count$Ratio <- round(origin_count$Ratio,2)
#Using Melt function to transform the Wide data to Long data format
DF3 <- melt(origin_count, id.var="ORIGIN")
DF3$Ratio <- DF3[9:12,3]
DF3 <- DF3[-9:-12,]
DF3[5:8,4] <- NA
ggplot(DF3, aes(x=ORIGIN,y=value,fill=variable)) + geom_bar(stat="identity") + geom_path(aes(y=Ratio,color="Ratio of Delayed flights against Non Delayed Flights"),group = 1) + geom_text_repel(aes(label=Ratio), size = 3) + ggtitle("Percentage of Flights Delayed by Destination") + labs(x="Destinations",y="Percentage")
view(airlinedata1)
View(airlinedata1)
levels(airlinedata1$CARRIER)
levels(airlinedata$CARRIER)
Airtraindata=as.data.frame(airlinedata1)
library(glmnet)
Airtraindata <- glm(ARR_DELAY ~ MONTH + DEP_HOUR + DEP_DELAY + WEEKEND + ORIGIN + DEST, data = train_df, family = “gaussian”)
AirtrainModel1 <- glm(ARR_DELAY ~ MONTH + DEP_HOUR + DEP_DELAY + WEEKEND + ORIGIN + DEST, data = Airtraindata, family = "guassian")
AirtrainModel1 <- glm(ARR_DELAY ~ MONTH + DEP_HOUR + DEP_DELAY +
WEEKEND + ORIGIN + DEST, data = Airtraindata, family = "binomial")
summary(Airtraindata$ARR_DELAY)
1665/60
boxplot.stats(airlinedata$ARR_DELAY)
boxplot(Airtraindata$ARR_DELAY)
boxplot(Airtraindata$ARR_DELAY, horizontal = TRUE)
hist(airlinedata$ARR_DELAY)
AirtrainModel1 <- glm(ARR_DELAY ~ MONTH + DEP_HOUR + DEP_DELAY +
WEEKEND + ORIGIN + DEST, data = Airtraindata, family = "gaussian")
AirtrainModel1 <- glm(ARR_DELAY ~ MONTH + DEP_HOUR + DEP_DELAY +
WEEKEND + ORIGIN + DEST, data = Airtraindata, family = "gaussian")
AirtrainModel1
summary(AirtrainModel1)
levels(airlinedata1)
levels(airlinedata1$ORIGIN)
R2Pseudo=1-(5140175/48645225)
R2Pseudo
install.packages("ROCR")
library(ROCR)
AirtrainModel2 <- glm(DELAY_LABELLED ~ MONTH + DEP_HOUR + DEP_DELAY +
WEEKEND + ORIGIN + DEST, data = Airtraindata, family = "binomial")
summary(AirtrainModel2)
R2Pseudo2=1-(9813.2/23026.8)
R2Pseudo2
AirpredObj=prediction(DELAY_LABELLED,Airtraindata)
AirpredObj=prediction(Airtraindata$DELAY_LABELLED,Airtraindata)
?prediction
Airlinepredict=predict(AirtrainModel2, type = "response")
AirpredObj=prediction(Airlinepredict,Airtraindata$DELAY_LABELLED)
rocObj=performance(AirpredObj,measure="tpr", x.measure="fpr")
aucObj=performance(AirpredObj,measure="auc")
plot(rocObj, main=paste("Area under Curve:", round(aucObj@y.values[[1]],4)))
airlinedatatest=read.csv(file = "C:\\Users\\praveen\\Documents\\Praveen\\Data Scientist Notes\\DataLabs\\Data Sets_latest\\airline_data\\airline_data\\test_df.csv")
airlinedatatest=airlinedatatest[30001:40000,]
str(airlinedatatest)
airlinedatatest$DEP_TIME <- with(airlinedatatest, impute(DEP_TIME, 'random'))
sum(is.na(airlinedatatest$DEP_TIME))
airlinedatatest$DEP_DELAY <- with(airlinedatatest, impute(airlinedatatest$DEP_DELAY, 'random'))
sum(is.na(airlinedatatest$DEP_DELAY))
airlinedatatest$ARR_TIME <- with(airlinedatatest, impute(airlinedatatest$ARR_TIME, 'random'))
sum(is.na(airlinedatatest$ARR_TIME))
airlinedatatest$ARR_DELAY <- with(airlinedatatest, impute(airlinedatatest$ARR_DELAY, 'random'))
sum(is.na(airlinedatatest$ARR_DELAY))
airlinedatatest$AIR_TIME <- with(airlinedatatest, impute(airlinedatatest$AIR_TIME, 'random'))
sum(is.na(airlinedatatest$AIR_TIME))
library(ROCR)
library(dplyr)
library(mice)
library(VIM)
library(Hmisc)# prefered first for imputation
library(missForest)
library(DMwR)
library(reshape2)
library(ggrepel)
library(glmnet)
airlinedatatest$DEP_TIME <- with(airlinedatatest, impute(DEP_TIME, 'random'))
sum(is.na(airlinedatatest$DEP_TIME))
airlinedatatest$DEP_DELAY <- with(airlinedatatest, impute(airlinedatatest$DEP_DELAY, 'random'))
sum(is.na(airlinedatatest$DEP_DELAY))
airlinedatatest$ARR_TIME <- with(airlinedatatest, impute(airlinedatatest$ARR_TIME, 'random'))
sum(is.na(airlinedatatest$ARR_TIME))
airlinedatatest$ARR_DELAY <- with(airlinedatatest, impute(airlinedatatest$ARR_DELAY, 'random'))
sum(is.na(airlinedatatest$ARR_DELAY))
airlinedatatest$AIR_TIME <- with(airlinedatatest, impute(airlinedatatest$AIR_TIME, 'random'))
sum(is.na(airlinedatatest$AIR_TIME))
airlinedatatest1=airlinedatatest[,-c(13)]
airlinedatatest1$WEEKEND= if_else(airlinedatatest1$DAY_OF_WEEK == 5 |
airlinedatatest1$DAY_OF_WEEK==6 |
airlinedatatest1$DAY_OF_WEEK ==7,1,0)
airlinedatatest1$DEP_HOUR=floor(airlinedatatest1$DEP_TIME/100)
airlinedatatest1$DELAY_LABELLED=ifelse(airlinedatatest1$ARR_DELAY>15,1,0)
airlinedatatest1$DELAY_LABELLED=as.integer(airlinedatatest1$DELAY_LABELLED)
str(airlinedatatest1$DELAY_LABELLED)
airlinedatatest1$ARR_DELAY=as.integer(airlinedatatest1$ARR_DELAY)
str(airlinedatatest1$ARR_DELAY)
str(airlinedatatest1$DEP_DELAY)
airlinedatatest1$DEP_DELAY=as.integer(airlinedatatest1$DEP_DELAY)
Airlinetestpredict=predict(AirtrainModel2,airlinedatatest1, type = "response")
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(airlinedata1$DELAY_LABELLED, SplitRatio = 0.75)
training_set = subset(airlinedata1, split == TRUE)
test_set = subset(airlinedata1, split == FALSE)
str(training_set)
str(test_set)
AirtrainModel1 <- glm(ARR_DELAY ~ MONTH + DEP_HOUR + DEP_DELAY +
WEEKEND + ORIGIN + DEST, data = training_set, family = "gaussian")
summary(AirtrainModel1)
R2Pseudo=1-(3974405/36791121)
R2Pseudo
Airlinetestpredict=predict(AirtrainModel1,test_set,type = "response")
Airlinetestpredict=predict(AirtrainModel1,newdata = test_set,type = "response")
Airlinetestpredict
summary(Airlinetestpredict)
Airlinetestpredict=predict(AirtrainModel1,newdata = test_set,type = "response")
Airlinetestpredict=predict(AirtrainModel1,newdata = test_set)
Airlinetestpredict=predict(AirtrainModel1,newdata = test_set,type = "response")
head(select(Airlinetestpredict, "ARR_DELAY", "prediction"))
library(dplyr)
head(select(Airlinetestpredict, "ARR_DELAY", "prediction"))
head(Airlinetestpredict)
head(select(Airlinetestpredict, "ARR_DELAY", "Airlinetestpredict"))
prediction=predict(AirtrainModel1,newdata = test_set,type = "response")
head(select(Airlinetestpredict, "ARR_DELAY", "prediction"))
prediction
head(prediction)
prediction=predict(AirtrainModel1,newdata = test_set,type = "response")
prediction=predict(AirtrainModel1,test_set,type = "response")
prediction=predict(AirtrainModel1,test_set)
head(prediction)
head(select(prediction, "ARR_DELAY", "prediction"))
prediction=predict(AirtrainModel1,newdata = test_set)
head(select(prediction, "ARR_DELAY", "prediction"))
x=as.data.frame(test_set$ORIGIN=='SBN')
x
str(x)
x=filter(test_set, test_set$ORIGIN='SBN')
x=filter(test_set, test_set$ORIGIN=='SBN')
str(x)
levels(test_set$ORIGIN)
levels(training_set$ORIGIN)
levels(training_set$DEST)
levels(test_set$DEST)
select(training_set, training_set$MONTH == '4')
select(training_set, training_set$MONTH = '4')
select(training_set, training_set$MONTH = 4)
select(training_set$MONTH)
select(training_set, MONTH)
library(caret)
library(ISLR)
View(Smarket)
LR=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5,data=Smarket,family = binomial)
train=Year<2005
Smarket.2005=Smarket[!train,] # Returns the data after 2005
Direction.2005=Direction[!train]# Returns the direcction data after 2005
LRtrain=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5,data=Smarket[train,],family = binomial)
attach(Smarket)
train=Year<2005
Smarket.2005=Smarket[!train,] # Returns the data after 2005
Direction.2005=Direction[!train]# Returns the direcction data after 2005
LRtrain=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5,data=Smarket[train,],family = binomial)
LRpredprobtestdata=predict(LRtrain, Smarket.2005,type="response")
str(LRpredprobtestdata)
prediction=predict(AirtrainModel1,newdata = test_set)
hello
setwd("~/Praveen/Data Scientist Notes/DataLabs/Data Sets_latest/Bank Marketing/bank-additional")
getwd()
Bankdata=read.csv("bank-additional-full.csv")
View(Bankdata)
str(Bankdata)
summary(Bankdata)
summary(Bankdata$AGE)
boxplot(Bankdata$AGE)
boxplot(Bankdata$AGE, horizontal = TRUE)
boxplot.stats(Bankdata$AGE)
str(x1)
#Bank Marketing data prediction using KNN Classifier
#Dataset consists of 41K+ records related to Marketing campaign of a Portugese bank and used to predict if
#a customer will subscribe to a Term Deposit or not
setwd("~/Praveen/Data Scientist Notes/DataLabs/Data Sets_latest/Bank Marketing/bank-additional")
getwd()
#Reading Bank Marketing Campaing Data
Bankdata=read.csv("bank-additional-full.csv")
#View(Bankdata)
#str(Bankdata) # consists of 41188 obs. with 21 variables
summary(Bankdata)
##-----EDA-----##
#Univariate Analysis
summary(Bankdata$AGE)
boxplot(Bankdata$AGE, horizontal = TRUE)
x1=boxplot.stats(Bankdata$AGE)
Bankdata=read.csv("bank-additional-full.csv")
#View(Bankdata)
#str(Bankdata) # consists of 41188 obs. with 21 variables
summary(Bankdata)
##-----EDA-----##
#Univariate Analysis
summary(Bankdata$AGE)
boxplot(Bankdata$AGE, horizontal = TRUE)
x1=boxplot.stats(Bankdata$AGE)
str(x1)
summary(Bankdata$DURATION)
x2=boxplot.stats(Bankdata$DURATION)
str(x2)
summary(CAMPAIGN)
summary(CAMPAIGN)
summary(Bankdata$CAMPAIGN)
x3=boxplot.stats(Bankdata$CAMPAIGN)
str(x3)
summary(Bankdata$PDAYS)
str(Bankdata$PDAYS)
boxplot.stats(Bankdata$PDAYS)
count=0
for(i in 1:41188){
ifelse(Bankdata$PDAYS==999){
count=count+1
}
}
print(count)
count=0
for(i in 1:41188){
ifelse(Bankdata$PDAYS==999)
count=count+1
}
print(count)
count=0
for(i in 1:41188){
ifelse(Bankdata$PDAYS[i]==999)
count=count+1
}
print(count)
predays=Bankdata$PDAYS
predays
count=0
for(i in 1:41188){
ifelse(predays[i]==999)
count=count+1
}
print(count)
predays[1]
predays[3500]
predays[25498]
predays[30195]
count=0
predays=Bankdata$PDAYS
for(i in 1:41188){
if(predays[i]==999)
count=count+1
}
print(count)
count=0
y=0
predays=Bankdata$PDAYS
for(i in 1:41188){
if(predays[i]==999){
count=count+1
}
else{
y=y+1
}
}
print(count)
print(y)
39673+1515
str(Bankdata$PDAYS)
boxplot.stats(Bankdata$PDAYS)
x4=as.factor(Bankdata$PDAYS)
str(x4)
count(Bankdata$PDAYS)
x5=count(Bankdata$PDAYS)
summary(Bankdata$PREVIOUS)
str(x5)
x5=boxplot.stats(Bankdata$PREVIOUS)
str(x5)
boxplot(Bankdata$PREVIOUS, horizontal = TRUE)
boxplot(Bankdata$PREVIOUS,names = TRUE)
hist(Bankdata$PREVIOUS)
sum(Bankdata$PDAYS == 999)
sum(Bankdata$PDAYS != 999)
sum(Bankdata$PREVIOUS = 7)
sum(Bankdata$PREVIOUS == 7)
sum(Bankdata$PREVIOUS != 7)
table(Bankdata$PREVIOUS)
table(Bankdata$POUTCOME)
41188-35563
4252+1373
1373/5625
table(Bankdata$JOB)
table(Bankdata$JOB & Bankdata$y == "yes")
table(Bankdata$JOB, Bankdata$y == "yes")
aggregate(Bankdata, Bankdata$Job, Bankdata$y == "yes")
aggregate(Bankdata$Job, Bankdata$y == "yes", sum)
aggregate(Bankdata$Job, Bankdata$y == "yes", length)
table(Bankdata$JOB)
table(Bankdata$MARITAL)
table(Bankdata$EDUCATION)
table(Bankdata$DEFAULT)
table(Bankdata$HOUSING)
table(Bankdata$LOAN)
table(Bankdata$CONTACT)
table(Bankdata$MONTH)
table(Bankdata$DAY_OF_WEEK)
hist(Bankdata$DAY_OF_WEEK)
plot(Bankdata$DAY_OF_WEEK)
boxplot(Bankdata$EMP.VAR.RATE)
table(Bankdata$EMP.VAR.RATE)
table(Bankdata$CONS.PRICE.IDX)
table(Bankdata$CONS.CONF.IDX)
table(Bankdata$EURIBOR3M)
table(Bankdata$NR.EMPLOYED)
sum(is.na(Bankdata))
sum(Bankdata == "unknown")
summary(Bankdata)
summary(Bankdata)
summary(Bankdata$JOB)
summary(Bankdata$EDUCATION)
summary(Bankdata$MONTH)
summary(Bankdata$DEFAULT)
8600/41188
str(Bankdata$DEFAULT)
def1=as.array(Bankdata$DEFAULT)
str(def1)
def1[1]
def1[7441]
count=0
for(i in 1:41188)
{
if(def1[i]=="unknown"){
def1[i]="yes"
count=count+1
}
}
str(def1)
View(def1)
def1=as.data.frame.vector(Bankdata$DEFAULT)
str(def1)
def1[7441]
def1=as.data.frame(Bankdata$DEFAULT)
ef1=as.data.frame(Bankdata$DEFAULT)
str(def1)
def1[7441]
def1=Bankdata$DEFAULT
str(def1)
def1[7441]
count=0
for(i in 1:41188)
{
if(def1[i]=="unknown"){
def1[i]="yes"
count=count+1
}
}
def1[7441]
View(def1)
summary(def1)
print(count)
str(Bankdata$DEFAULT)
str(def1)
str(mar)
mar=Bankdata$MARITAL
str(mar)
levels(mar)
library(DMwR)
library(class)
library(caTools)
library(gmodels)
library(DMwR)
library(class)
mar[mar == "unknown"] = NA
levels(mar)
sum(is.na(mar))
str(mar)
mar=Bankdata$MARITAL
str(mar)
levels(mar)
y1=mar[mar == "unknown"] = NA
sum(is.na(y1))
mar[234]
for(i in 1:41188)
{
if(mar[i]=="unknown"){
mar[i]= NA
count=count+1
}
}
print(count)
str(mar)
mar=as.vector(Bankdata$MARITAL)
str(mar)
levels(mar)
mar[234]
for(i in 1:41188)
{
if(mar[i]=="unknown"){
mar[i]= NA
count=count+1
}
}
print(count)
str(Bankdata$MARITA)
summary(Bankdata$MARITA)
count=0
for(i in 1:41188)
{
if(mar[i]=="unknown"){
mar[i]= NA
count=count+1
}
}
print(count)
mar[9488]
str(mar)
sum(is.na(mar))
View(mar)
Bankdata[9488][3]
matr=as.matrix(Bankdata)
str(matr)
matr[9488][3]
BankdataUpd <- lapply(Bankdata, gsub, pattern = "unknown", replacement = "NA", fixed = TRUE)
View(BankdataUpd)
sum(is.na(BankdataUpd))
BankdataUpd <- lapply(Bankdata, gsub, pattern = "unknown", replacement = NA, fixed = TRUE)
sum(is.na(BankdataUpd))
BankdataUpd=as.data.frame(BankdataUpd)
sum(is.na(BankdataUpd))
View(BankdataUpd)
?lapply
BankdataUpd=knnImputation(BankdataUpd,k=10)
sum(is.na(BankdataUpd))
summary(BankdataUpd)
sum(is.na(BankdataUpd))
summary(BankdataUpd)
summary(Bankdata)
str(Bankdata)
str(BankdataUpd)
BankdataUpd <- lapply(Bankdata, gsub, pattern = "unknown", replacement = NA, fixed = TRUE)
str(BankdataUpd)
BankdataUpd=as.data.frame(BankdataUpd)
str(BankdataUpd)
BankdataUpd <- lapply(Bankdata, gsub, pattern = "unknown", replacement = "NA", fixed = TRUE)
str(BankdataUpd)
BankdataUpd$JOB<- lapply(Bankdata$JOB, gsub, pattern = "unknown", replacement = NA, fixed = TRUE)
str(BankdataUpd)
sdjfhasdfkj
